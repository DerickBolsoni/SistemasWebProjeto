#!/bin/bash

# ==============================================================================
# Script de Deploy para o Ambiente de PRODU√á√ÉO (MAIN)
#
# PROJETO: FastDelivery Tracker
#
# DESCRI√á√ÉO:
# Este script automatiza o processo de deploy da aplica√ß√£o na AWS para o
# ambiente de produ√ß√£o. Ele inclui v√°rias checagens de seguran√ßa para
# minimizar o risco de deploys acidentais ou incorretos.
#
# ATEN√á√ÉO:
# ESTE SCRIPT REALIZA ALTERA√á√ïES DIRETAMENTE NO AMBIENTE DE PRODU√á√ÉO.
# TENHA CERTEZA ABSOLUTA DO QUE EST√Å FAZENDO ANTES DE EXECUTAR.
# ==============================================================================

# --- Configura√ß√£o de Seguran√ßa ---
# 'set -e' garante que o script ir√° parar imediatamente se qualquer comando falhar.
# Essencial para evitar um deploy parcial ou um estado inconsistente em produ√ß√£o.
set -e

# --- Vari√°veis de Configura√ß√£o ---
# Centralizar as configura√ß√µes em vari√°veis facilita a manuten√ß√£o do script.
ENVIRONMENT="main"
STACK_NAME="fast-delivery-tracker-main"
REGION="sa-east-1"
LAMBDA_ZIP_FILE="lambdas.zip" # Nome do arquivo tempor√°rio para o c√≥digo das Lambdas

echo "üöÄ Iniciando deploy do FastDelivery Tracker - Ambiente MAIN (PRODU√á√ÉO)"
echo "=================================================="

# --- Checagem de Pr√©-requisitos (Pre-flight Check) ---
# 1. Verifica se o AWS CLI est√° configurado e autenticado.
echo "üîç Verificando credenciais da AWS..."
# 'aws sts get-caller-identity' √© um comando leve que falha se n√£o houver credenciais v√°lidas.
# A sa√≠da √© descartada com '> /dev/null 2>&1'. O 'if' apenas checa se o comando foi bem-sucedido.
if ! aws sts get-caller-identity > /dev/null 2>&1; then
    echo "‚ùå AWS CLI n√£o est√° configurado. Execute 'aws configure' primeiro."
    exit 1 # Encerra o script com um c√≥digo de erro.
fi

# --- Barreiras de Seguran√ßa (Safety Gates) ---
# 2. Confirma√ß√£o manual para deploy em produ√ß√£o. Previne execu√ß√µes acidentais.
echo "‚ö†Ô∏è  ‚ö†Ô∏è  ‚ö†Ô∏è  ATEN√á√ÉO: Voc√™ est√° prestes a fazer deploy em PRODU√á√ÉO! ‚ö†Ô∏è  ‚ö†Ô∏è  ‚ö†Ô∏è"
echo "Este ambiente ser√° usado por clientes reais."
read -p "Voc√™ tem CERTEZA ABSOLUTA? Digite 'DEPLOY' para confirmar: " -r
if [[ ! $REPLY == "DEPLOY" ]]; then
    echo "‚ùå Deploy cancelado pelo usu√°rio."
    exit 1
fi

# 3. Confirma√ß√£o de que os testes foram realizados nos ambientes anteriores.
echo "üîç Verificando se o c√≥digo foi testado em outros ambientes..."
read -p "Este c√≥digo foi testado no ambiente DEV? (y/N): " -n 1 -r
echo # Adiciona uma nova linha ap√≥s a resposta do usu√°rio
# A express√£o regular `^[Yy]$` verifica se a resposta foi 'Y' ou 'y'.
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "‚ùå Deploy cancelado. Teste primeiro no ambiente DEV."
    exit 1
fi

read -p "Este c√≥digo foi testado no ambiente HOM? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "‚ùå Deploy cancelado. Teste primeiro no ambiente HOM."
    exit 1
fi

# --- Backup (Opcional, mas recomendado) ---
# Esta se√ß√£o foi comentada pois a l√≥gica de criar uma nova stack como backup
# pode ter custos inesperados. Uma estrat√©gia melhor seria usar Change Sets ou backups do DynamoDB.
# echo "üíæ Verificando se existe ambiente atual para backup..."
# if aws cloudformation describe-stacks --stack-name $STACK_NAME --region $REGION > /dev/null 2>&1; then
#     echo "üì¶ Criando snapshot de backup da stack atual..."
#     BACKUP_STACK_NAME="${STACK_NAME}-backup-$(date +%Y%m%d-%H%M%S)"
#     aws cloudformation create-stack \
#         --stack-name "$BACKUP_STACK_NAME" \
#         --template-url "$(aws cloudformation get-template --stack-name $STACK_NAME --query 'TemplateBody' --output text)" \
#         --parameters ... # Seria necess√°rio replicar os par√¢metros
# fi

# --- Empacotamento do C√≥digo ---
echo "üì¶ Criando pacote .zip com as fun√ß√µes Lambda..."
cd lambdas # Entra no diret√≥rio das fun√ß√µes
# O comando 'zip' cria um arquivo. O '-r' √© para recursividade (n√£o necess√°rio aqui, mas boa pr√°tica).
# '../$LAMBDA_ZIP_FILE' cria o arquivo no diret√≥rio pai (raiz do projeto).
zip ../$LAMBDA_ZIP_FILE *.py requirements.txt
cd .. # Volta para o diret√≥rio raiz do projeto

# --- Deploy da Infraestrutura via CloudFormation ---
echo "‚òÅÔ∏è  Fazendo deploy da infraestrutura com CloudFormation..."
# O comando 'aws cloudformation deploy' √© idempotente: ele cria a stack se n√£o existir
# ou atualiza se j√° existir.
aws cloudformation deploy \
    --template-file cloudformation/main-template.yaml \
    --stack-name $STACK_NAME \
    --parameter-overrides Environment=$ENVIRONMENT \
    # '--capabilities CAPABILITY_IAM' √© uma confirma√ß√£o de seguran√ßa de que a stack pode criar recursos de IAM (roles, policies).
    --capabilities CAPABILITY_IAM \
    --region $REGION \
    # '--role-arn' especifica um papel para o CloudFormation usar. √â uma boa pr√°tica de seguran√ßa
    # para limitar as permiss√µes ao inv√©s de usar as do usu√°rio que executa o script.
    # O `$(...)` executa um comando para obter o ID da conta dinamicamente.
    --role-arn arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):role/CloudFormationExecutionRole

# --- Extra√ß√£o de Outputs da Stack ---
# Ap√≥s o deploy, pegamos os ARNs (nomes √∫nicos) das Lambdas criadas.
# A flag '--query' usa a linguagem JMESPath para filtrar o JSON de retorno e pegar apenas o valor que precisamos.
echo "üîó Obtendo ARNs das fun√ß√µes Lambda criadas..."
ADD_ORDER_LAMBDA=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --region $REGION --query 'Stacks[0].Outputs[?OutputKey==`AddOrderLambdaArn`].OutputValue' --output text)
SET_DELIVERED_LAMBDA=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --region $REGION --query 'Stacks[0].Outputs[?OutputKey==`SetAsDeliveredLambdaArn`].OutputValue' --output text)
NOTIFY_OWNER_LAMBDA=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --region $REGION --query 'Stacks[0].Outputs[?OutputKey==`NotifyOwnerLambdaArn`].OutputValue' --output text)

# --- Atualiza√ß√£o do C√≥digo das Fun√ß√µes Lambda ---
echo "üîÑ Atualizando o c√≥digo-fonte das fun√ß√µes Lambda..."
# Com os ARNs em m√£os, agora atualizamos o c√≥digo de cada fun√ß√£o com o .zip que criamos.
# 'fileb://' √© importante para que o CLI envie o arquivo como um bin√°rio.
aws lambda update-function-code --function-name $ADD_ORDER_LAMBDA --zip-file fileb://$LAMBDA_ZIP_FILE --region $REGION
aws lambda update-function-code --function-name $SET_DELIVERED_LAMBDA --zip-file fileb://$LAMBDA_ZIP_FILE --region $REGION
aws lambda update-function-code --function-name $NOTIFY_OWNER_LAMBDA --zip-file fileb://$LAMBDA_ZIP_FILE --region $REGION

# --- Obten√ß√£o da URL da API ---
# Pega a URL do API Gateway, tamb√©m definida como um Output na stack do CloudFormation.
echo "üîó Obtendo URL do API Gateway..."
API_URL=$(aws cloudformation describe-stacks --stack-name $STACK_NAME --region $REGION --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayUrl`].OutputValue' --output text)

# --- Limpeza ---
# Remove o arquivo .zip local que foi criado, j√° que n√£o √© mais necess√°rio.
echo "üßπ Limpando arquivos tempor√°rios..."
rm $LAMBDA_ZIP_FILE

# --- Resumo Final ---
# Exibe as informa√ß√µes mais importantes para o usu√°rio ap√≥s o deploy.
echo ""
echo "‚úÖ Deploy em PRODU√á√ÉO conclu√≠do com sucesso!"
echo "=================================================="
echo "üåê URL da API: $API_URL"
echo "üìã Endpoints dispon√≠veis:"
echo "   POST   $API_URL/add-order"
echo "   PUT    $API_URL/order/{order_id}/delivered"
echo ""
echo "üìä Para monitorar em produ√ß√£o, use comandos como:"
echo "   aws logs describe-log-groups --region $REGION"
echo "   aws cloudwatch get-metric-statistics --namespace AWS/Lambda --region $REGION"
echo ""
echo "üö® Lembre-se de monitorar os logs e m√©tricas da aplica√ß√£o ap√≥s o deploy!"