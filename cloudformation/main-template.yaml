AWSTemplateFormatVersion: '2010-09-09'
Description: 'Template principal do FastDelivery Tracker - Sistema de Entrega de Hamburgueria'

Parameters:
  Environment:
    Type: String
    Default: dev
    AllowedValues: [dev, hom, main]
    Description: Ambiente de deploy
  
  ProjectName:
    Type: String
    Default: FastDeliveryTracker
    Description: Nome do projeto

Resources:
  # SQS Stack
  SqsStack:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./sqs-config.yaml
      Parameters:
        Environment: !Ref Environment

  # Lambda Function para adicionar pedidos
  AddOrderLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-add-order-${Environment}'
      Runtime: python3.9
      Handler: add_order.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': 'placeholder'}
      Environment:
        Variables:
          ORDERS_TABLE_NAME: !Ref OrdersTable
          SNS_TOPIC_ARN: !Ref FastDeliveryTopic
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # Lambda Function para marcar como entregue
  SetAsDeliveredLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-set-delivered-${Environment}'
      Runtime: python3.9
      Handler: set_as_delivered.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': 'placeholder'}
      Environment:
        Variables:
          ORDERS_TABLE_NAME: !Ref OrdersTable
          SNS_TOPIC_ARN: !Ref FastDeliveryTopic
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # Lambda Function para notificar proprietário
  NotifyOwnerLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${ProjectName}-notify-owner-${Environment}'
      Runtime: python3.9
      Handler: notify_owner.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import json
          def lambda_handler(event, context):
              return {'statusCode': 200, 'body': 'placeholder'}
      Environment:
        Variables:
          TOKENS_TABLE_NAME: !Ref TokensTable
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Environment
          Value: !Ref Environment

  # IAM Role para Lambda
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource:
                  - !GetAtt OrdersTable.Arn
                  - !GetAtt TokensTable.Arn
        - PolicyName: SNSPublish
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: !Ref FastDeliveryTopic
        - PolicyName: SQSQueueAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'sqs:ReceiveMessage'
                  - 'sqs:DeleteMessage'
                  - 'sqs:GetQueueAttributes'
                Resource: !GetAtt SqsStack.Outputs.OrdersQueueArn

  # Tabela DynamoDB Orders
  OrdersTable:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./orders-table.yaml
      Parameters:
        Environment: !Ref Environment

  # Tabela DynamoDB Tokens
  TokensTable:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./tokens-table.yaml
      Parameters:
        Environment: !Ref Environment

  # Tópico SNS
  FastDeliveryTopic:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./sns-config.yaml
      Parameters:
        Environment: !Ref Environment

  # Event Source Mapping para SQS e NotifyOwnerLambda
  NotifyOwnerEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      EventSourceArn: !GetAtt SqsStack.Outputs.OrdersQueueArn
      FunctionName: !GetAtt NotifyOwnerLambda.Arn
      Enabled: true
      BatchSize: 10

  # API Gateway
  ApiGateway:
    Type: AWS::CloudFormation::Stack
    Properties:
      TemplateURL: ./api-gateway.yaml
      Parameters:
        Environment: !Ref Environment
        AddOrderLambda: !GetAtt AddOrderLambda.Arn
        SetAsDeliveredLambda: !GetAtt SetAsDeliveredLambda.Arn

Outputs:
  ApiGatewayUrl:
    Description: URL do API Gateway
    Value: !GetAtt ApiGateway.Outputs.ApiGatewayUrl