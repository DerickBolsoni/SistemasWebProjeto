#!/bin/bash

# Script de deploy para ambiente de produ√ß√£o
# FastDelivery Tracker - Ambiente MAIN

set -e

# Configura√ß√µes
ENVIRONMENT="main"
STACK_NAME="fast-delivery-tracker-main"
REGION="sa-east-1"
LAMBDA_ZIP_FILE="lambdas.zip"

echo "üöÄ Iniciando deploy do FastDelivery Tracker - Ambiente MAIN (PRODU√á√ÉO)"
echo "=================================================="

# Verificar se AWS CLI est√° configurado
if ! aws sts get-caller-identity > /dev/null 2>&1; then
    echo "‚ùå AWS CLI n√£o est√° configurado. Execute 'aws configure' primeiro."
    exit 1
fi

# Confirmar deploy em produ√ß√£o
echo "‚ö†Ô∏è  ‚ö†Ô∏è  ‚ö†Ô∏è  ATEN√á√ÉO: Voc√™ est√° prestes a fazer deploy em PRODU√á√ÉO! ‚ö†Ô∏è  ‚ö†Ô∏è  ‚ö†Ô∏è"
echo "Este ambiente ser√° usado por clientes reais."
read -p "Voc√™ tem CERTEZA ABSOLUTA? Digite 'DEPLOY' para confirmar: " -r
if [[ ! $REPLY == "DEPLOY" ]]; then
    echo "‚ùå Deploy cancelado."
    exit 1
fi

# Verificar se o c√≥digo foi testado em outros ambientes
echo "üîç Verificando se o c√≥digo foi testado em outros ambientes..."
read -p "Este c√≥digo foi testado no ambiente DEV? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "‚ùå Deploy cancelado. Teste primeiro no ambiente DEV."
    exit 1
fi

read -p "Este c√≥digo foi testado no ambiente HOM? (y/N): " -n 1 -r
echo
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "‚ùå Deploy cancelado. Teste primeiro no ambiente HOM."
    exit 1
fi

# Criar backup do ambiente atual (se existir)
echo "üíæ Verificando se existe ambiente atual para backup..."
if aws cloudformation describe-stacks --stack-name $STACK_NAME --region $REGION > /dev/null 2>&1; then
    echo "üì¶ Criando backup do ambiente atual..."
    aws cloudformation create-stack \
        --stack-name "${STACK_NAME}-backup-$(date +%Y%m%d-%H%M%S)" \
        --template-body file://cloudformation/main-template.yaml \
        --parameters ParameterKey=Environment,ParameterValue=backup \
        --capabilities CAPABILITY_IAM \
        --region $REGION
fi

# Criar arquivo ZIP com as fun√ß√µes Lambda
echo "üì¶ Criando pacote das fun√ß√µes Lambda..."
cd lambdas
zip -r ../$LAMBDA_ZIP_FILE *.py requirements.txt
cd ..

# Deploy do CloudFormation com prote√ß√µes extras
echo "‚òÅÔ∏è  Fazendo deploy do CloudFormation em PRODU√á√ÉO..."
aws cloudformation deploy \
    --template-file cloudformation/main-template.yaml \
    --stack-name $STACK_NAME \
    --parameter-overrides Environment=$ENVIRONMENT \
    --capabilities CAPABILITY_IAM \
    --region $REGION \
    --role-arn arn:aws:iam::$(aws sts get-caller-identity --query Account --output text):role/CloudFormationExecutionRole

# Obter ARNs das fun√ß√µes Lambda
ADD_ORDER_LAMBDA=$(aws cloudformation describe-stacks \
    --stack-name $STACK_NAME \
    --region $REGION \
    --query 'Stacks[0].Outputs[?OutputKey==`AddOrderLambdaArn`].OutputValue' \
    --output text)

SET_DELIVERED_LAMBDA=$(aws cloudformation describe-stacks \
    --stack-name $STACK_NAME \
    --region $REGION \
    --query 'Stacks[0].Outputs[?OutputKey==`SetAsDeliveredLambdaArn`].OutputValue' \
    --output text)

NOTIFY_OWNER_LAMBDA=$(aws cloudformation describe-stacks \
    --stack-name $STACK_NAME \
    --region $REGION \
    --query 'Stacks[0].Outputs[?OutputKey==`NotifyOwnerLambdaArn`].OutputValue' \
    --output text)

# Atualizar c√≥digo das fun√ß√µes Lambda
echo "üîÑ Atualizando c√≥digo das fun√ß√µes Lambda..."

aws lambda update-function-code \
    --function-name $ADD_ORDER_LAMBDA \
    --zip-file fileb://$LAMBDA_ZIP_FILE \
    --region $REGION

aws lambda update-function-code \
    --function-name $SET_DELIVERED_LAMBDA \
    --zip-file fileb://$LAMBDA_ZIP_FILE \
    --region $REGION

aws lambda update-function-code \
    --function-name $NOTIFY_OWNER_LAMBDA \
    --zip-file fileb://$LAMBDA_ZIP_FILE \
    --region $REGION

# Obter URL da API
API_URL=$(aws cloudformation describe-stacks \
    --stack-name $STACK_NAME \
    --region $REGION \
    --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayUrl`].OutputValue' \
    --output text)

# Limpar arquivo ZIP
rm $LAMBDA_ZIP_FILE

echo ""
echo "‚úÖ Deploy em PRODU√á√ÉO conclu√≠do com sucesso!"
echo "=================================================="
echo "üåê URL da API: $API_URL"
echo "üìã Endpoints dispon√≠veis:"
echo "   POST   $API_URL/add-order"
echo "   PUT    $API_URL/order/{order_id}/delivered"
echo ""
echo "üìä Para monitorar em produ√ß√£o:"
echo "aws logs describe-log-groups --region $REGION"
echo "aws cloudwatch get-metric-statistics --namespace AWS/Lambda --region $REGION"
echo ""
echo "üö® Lembre-se de monitorar os logs e m√©tricas ap√≥s o deploy!"
